开发简单
简单到一周学会就可以写线上代码。首先这是由于 Go 语言本身的设计，Go 语言在过去10年间几乎没有大的变化，从设计之初就秉承这样的设计理念 —— LESS is MORE。

Go 的生态也秉承了 LESS is MORE 的 Go 语言哲学，大部分的 Go 相关库都是开箱既用，只需要查阅少量的文档就可以使用了。

由于简单，心智负担少，开发也变得更快、更容易。比如实现一个 OAuth 系统，用 Java 需要看一上午的文档再写 3-400 百行代码。但是用 Go 直接写下 500-600 行代码就搞定了，这就是没心智负担。如果遇到了小程序那种看起来像 OAuth 但是实际不是 OAuth 的接口，用 Spring 就要自定义一下，但是用 Go 还是原来那样——只关注业务逻辑自身。

部署简单
本地打包一个二进制传到服务运行就好了没有虚拟机没有容器。如果用 Docker，那就更方便了，用 Docker 来部署 Go 应用是最快的。并且容器技术 Docker 本身也是用 Go 写的，k8s 也是用 Go 写的。真的没见过比 Go 更容易部署的语言了。

使用Python的原因，是开发更快，从而可以快速试错。利用现有的Web框架，搭配合适的数据库，我们可以在1-2周内实现一个完整产品的上线，进行快速试错。我们针对Python制订了一系列的标准，用于规范代码的格式，保证代码的强壮度。

使用Golang的原因，在于需要制作大型长期稳定运行项目的考量。事实上，在前面也提到了，在目前的开发过程中，Python在多人协作过程中个人编码风格、工程性上要更弱、长期运行无法控制的内存泄漏等等问题，如果需要长期稳定运行，更倾向于选择可以进行编译的编译型语言，通过静态检查＋动态测试方式，更好的保证程序的强壮型。


我对 Go 最初的印象是，由于它的抽象能力（有意为之）有限，所以它不像 Python 那样有趣。Python 有更多的特性，因此有更多的方法来做一些事情，找到最快、最易读或“最聪明”的解决方案可能会很有趣。Go 会积极地阻止你变得“聪明”。我认为，Go 的优势在于它并不聪明。

它的极简主义和缺乏自由限制了单个开发人员实现一个想法。然而，当项目扩展到几十个或几百个开发人员时，这个弱点变成了它的力量——因为每个人都使用同样的语言特性小工具集，更容易统一，因此可以被他人理解。使用 Go 仍有可能编写糟糕的代码，但与那些更“强大”的语言相比，它让你更难创造怪物。

使用一段时间后，我理解了为什么像谷歌这样的公司想要一门这样的语言。新工程师不断地加入到大量代码库的开发，在更复杂/更强大的语言中，在最后期限的压力下，引入复杂性的速度比它被消除的速度更快。防止这种情况发生的最好方法是使用一种更不容易产生复杂性的语言。

所以说，我很高兴工作在一个大型应用程序上下文中的 Go 代码库上，有一个多样化和不断增长的团队。事实上，我认为我更喜欢它。我只是不想把它用于我自己的个人项目。

显然，这三种截然不同的语言实现满足不同的细分市场需求。我经常听到 Go 和 Rust 被一起提及，但我认为，Go 和 Python 是两种类似/存在竞争关系的语言。它们都很适合编写服务器端应用程序逻辑（我在工作中大部分时间都在做这项工作）。仅比较原生代码的性能，Go 完胜 Python，但许多有速度要求的 Python 库是对速度更快的 C 实现的封装——实际情况比这种天真的比较更复杂。编写一个用于 Python 的 C 扩展不能完全算是 Python 了（你需要了解 C），但这个选项是对你开放的。

对于你的后端服务器需求，Python 已被证明它对于大多数应用程序都“足够快”，但是如果你需要更好的性能，Go 可以，Rust 更是如此，但是你要付出更多的开发时间。Go 在这方面并没有超出 Python 很多，虽然开发肯定是慢一些，这主要是由于其较小的特性集。Rust 的特性非常齐全，但管理内存总是比由语言自己管理会花费更多的时间，这好过处理 Go 的极简性。

还应该提一下，世界上有很多很多 Python 开发人员，有些有几十年的经验。如果你选择 Python，那么找到更多有语言经验的人加入到你的后端团队中可能并不难。然而，Go 开发人员并不是特别少，而且很容易发展，因为这门语言很容易学习。由于 Rust 这种语言需要更长的时间内化，所以开发人员更少，也更难发展。

至于系统类型：静态类型系统更容易编写更多正确的代码，但它不是万能的。无论使用何种语言，你仍然需要编写综合测试。它需要更多的训练，但是我发现，我使用 Python 编写的代码并不一定比 Go 更容易出错，只要我能够编写一个好的测试套件。尽管如此，相比于 Go，我更喜欢 Rust 的类型系统：它支持泛型、模式匹配、错误处理，它通常为你做得更多。

最后，这种比较有点愚蠢，因为尽管这些语言的用例重叠，但它们占领着不同的细分市场。Python 开发速度快、性能低，而 Rust 恰恰相反，Go 则介于两者之间。我喜欢 Python 和 Rust 超过 Go（这可能令人奇怪），不过我会继续在工作中愉快地使用 Go（以及 Python），因为它真的是一种构建稳定、可维护的应用程序的伟大语言，它有许多来自不同背景的贡献者。它的僵硬和极简主义使它使用起来不那么令人愉快（对我来说），但这也正是它的力量所在。如果我要为一个新的 Web 应用程序选择后端语言的话，那将是 Go。


当移植 Python 代码时，一位工程师注意到，Go 中的某些语言结构需要更多的努力才能写出代码，但是 Go 相对较少的语言特性使得代码更加一致，读取速度更快。在系统的某一部分中，我们需要 2.7 倍的 Go 语言代码来处理与 Python 代码相同的特性，尽管其中一部分是由于某些函数调用被跨服务查询所替代。

编写 50 万行 Go 代码后的感想 总结一下： Go 通常比 Python 更冗长。但我们很喜欢！它的速度很快，工具很可靠，并且在生产上运行良好。

将 python 用大的正式项目需要掌握 type hints 和 C 扩展。

为什么初创公司要用Python？我的理解是这样的，初创公司的时间和预算有限，而且需要足够的灵活性。Reid Hoffman 是这样介绍创业公司的：将你自己推下悬崖，在下坠的过程中组装起一家飞机。

Python开发人员提供了在有限预算下创建最小可行产品(MVP)的能力，可以帮助初创公司测试想法。

小而美的团队

Python 可以让创业公司快速地搭建一个小而美的团队。以前大学的一个个朋友在当地一家创业公司当 CTO，他建立了一个由 10 名开发人员组成的团队，他们现在所做的工作相当于 30 名开发者的工作量。这更加坚定了我成为一名 Django 开发者的决心，因为我可以真切地为公司创造价值，而且也有利于未来自己创业。

通过小而美的团队来构建产品或服务，可以让你在创业之路上走的更远。

只能选择一种语言作为主力语言，因为选择一种语言，它本身的重要性只占很小一部分，更重要的是要熟悉它的生态系统。迁移语言很容易，迁移生态系统几乎不可能。做一件事情应该有且仅有一种方法。日志，正则表达式，字符串格式化，文件 IO、日期时间、web 框架、数据库 ORM 框架等等，不能为两种语言同时学习两套重复的知识体系。
