design texture diagrams in Unity
use a manager object to link them to materials in your scenes
export to PNG images
generate textures and animations at runtime with scripts
the Noise and Utilities libraries, which can be used in your own projects as well

texture diagrams is a asset, create a new diagram asset

The inspector of the diagram contains various configuration options for previewing and exporting

use diagram editor to edit the diagram

an additional panel at the top right of the window, which contains information and configuration options for the selected node

A preview panel has also shown up at the bottom right of the window

Connectors on the left of a node belong to its properties, while the connector on the right of a node represents its output

Only connectors of the same type can be linked

Image's horizontal texture coordinate node -> Coordinates / U

You can create a tiling 3D Perlin noise pattern with the node found under Noise 3D / Perlin / Tiled XY. This version of the noise tiles in two dimensions, which is useful when you want to create tiling textures.

Sampling Noise: The 3D noise nodes need a Vector3 sample point
You can create one via Vector3 / From Floats and then connect its X and Y properties to the U and V coordinate.
You can add a V coordinate node via Coordinates / V. The vector's Z property can remain at zero, or you can set it to a different value, which will produce a different result.

Adjusting Noise Output
While you can directly use the noise samples
you can create different patterns by manipulating its output

Floats / Ã— + Multiply Add node
Floats / Range / Pingpong 01 node

Diagram Material Manager: use diagram to texture materials
You could export to PNG files;
Use scripting to fill textures manually;
The most convenient way is to use a diagram material manager;

Modify material in run-time, in memory, so Diagram Material Manager needs to execute in runtime.

A diagram material manager is a component that allows you to link diagrams and materials together.
It's a script component, generate texture and set it to material. It takes a diagram which is a asset, but not specific noise formula, and give the samples as texture, so it isolate the noise formula and the application, which can also be used in other cases, the idea is make the noise formula as a independent asset, so it can be easily adjusted.

The manager prefab contains a list of links between diagrams and materials.
make its Diagram property reference your diagram.

The texture settings are used for all textures generated by a diagram.

Generated texture is not stored on the file system, it only exists in memory.

The default mode of the manager is to use a separate thread to generate its textures. This means that your application will not stall, but the textures won't be immediately ready. Fall back to its default white texture.

Adding Bumps
Add a second output to your diagram.
This time you need only a single value instead of an entire color.
Bump mapping has two implement:
Bump texture: a height map, contains a single height(bump) value of surface, engine will calculate normal map automatically
Normal texture: pre-calculated normal map
Height mapping is not about bump, it's about parallax, means some pixels can overlay others when view from different position, while Bump mapping will not, because it's just flat texture, any pixels will not overlay others no matter what direction of view.

Change the Type of your new output to NormalMap, conresponding texture import type, to mark it's a normalmap, so engine will calculate normal automatically.

Diagram Material Manager only assigns the generated textures to material in the links, doesn't modify how the shader processes these textures.

Updating the Material
Changes to diagrams are not immediately picked up by the diagram material manager. The easiest way to update the manager without toggling play mode is to select the manager instance and hit the Revert button. You can lock an inspector window so you don't have to reselect the manager instance all the time.
For complex shaders such as the Standard one, it might also be necessary to manually select the material after adding or removing a texture. This is necessary when the shader's inspector sets shader keywords based on its parameters.

Controlling Metallic and Smoothness Levels
The Standard shader supports even more maps, for example the metallic and smoothness map. You can support it by adding another output named _MetallicGlossMap to the diagram. This has to be an ARGB texture that stores the metallic value in its R channel and the smoothness value in its A channel. You could control these values with a gradient. So red pixels in texture means metallic, transparent pixels in texture means smoothness.

Everything in the current scene is destroyed, then the objects in the next scene are created. Unfortunately, this means that all the generated textures are destroyed and are then generated again.
If you can prevent the manager instance from being destroyed when another scene is loaded, then the textures won't be destroyed either.
DontDestroyOnLoad

Having a manager per scene is useful when you're editing those scenes manually.








