Be stupid
Don't be clever
Bottom up
Refactor, don't design

思考如何更优化地实现以及在各种方案中进行选择所浪费的时间和精力（进而导致的烦恼）带来的代价远远大于它们带来的收益。时间和精力要放在价值高的地方：游戏性和关键区域性能。游戏性才是最值得花时间关注的地方，而关键区域性能只存在于游戏循环中，对于 UI 相关以及类似的，只会偶尔执行的代码区域，根本不值得仔细设计和实现，不需要考虑最佳性能，只需要使用任何方法来快速实现，以现在计算机的计算能力，这些根本不可能造成问题。而且好的代码和架构不是设计出来的，而是迭代出来的，如果任何一个地方确认需要优化，也是很容易的事情，不要过早优化。对于这些地方，即使明知道有更优化的方法来实现也不要考虑，只要用最简单最直接了当的方法快速完成，考虑它们的性能优化完全是浪费时间。这就像用脚本语言编程一样，无论是代码里，还是解释器或虚拟机内部本身，相比于编译型语言，绝大多数的地方都不是最优的，都充满的冗余。但是使用的时候从来不会认为这是个问题。因为绝大多数情况下，脚本的应用场景都是不需要高性能的，相反便捷性，快速实现想法才是它追求的目标。游戏编程也是一样，其实绝大多数的地方（例如 UI ），都是不需要性能的，都只是偶尔执行的，只有游戏循环中的代码才需要考虑性能（而这只是非常少的地方）。因此，即使是游戏中，UI 这样不是频繁执行的代码即使用脚本语言实现都没问题。游戏编程要有脚本思维，牺牲性能换取便捷性。对游戏来说，迭代速度就是一切，完成比完美更重要。

对于优化，最重要的问题不是如何优化，而是确定优化的区域。因为对非必要的区域进行优化只是一厢情愿的浪费时间，通常那只是因为你知道能那么做，而不是应该那么做而已。一旦确定了目标区域，优化本身反而是容易的。

像使用脚本语言一样进行游戏开发，快速实现才是一切，在实践中确定需要优化的地方。对于脚本语言代码，确定了需要优化的地方后，这些地方会使用高性能的编译型语言来实现。

把资源（时间和技术）用在高价值的地方，对高价值的关键核心区域可以花费精心设计（例如状态机）、优化性能（例如缓存对象池），对于低价值不重要的地方简单粗略（不要在各种可能的实现之间进行评估选择）。不需要对所有的地方都精心设计，该精致的地方精致，该粗糙的地方粗糙。只有对关键核心区域的设计才是体现能力的地方，对不需要的地方如此只是没有意义的浪费时间。将有限的资源合理分配到价值不一的各个地方也是一种关键能力。

代码、系统、架构的设计不是针对机器的，而是针对人的。设计的核心是整理，就像整理房间一样，目的是当你需要找到一个东西的时候能快速找到，仅此而已。对于机器而言，如何设计是没有意义，即使完全意大利面式的代码，只要能正确运行，都没有区别。甚至通常，越是良好的设计，越需要机器做出妥协（牺牲一部分性能，包含一定程度冗余，使用不那么性能友好的方法实现，但是可以大大减轻人维护的成本负担）。各种设计模式的终极要义就是归纳整理，减少头脑负担。只要能达到这一目的，不管什么方法都是好方法。

归纳整理的本质就是为不同的 code 找合适的容器（源文件）。

UnityEvent 或 UltEvent 这些解耦工具只适合于只向外提供服务的自包含插件或模块，向外提供 event slot，例如 VisualTweenSequence。不适合用于组装应用程序逻辑，因为它们不是自包含的，而且经常改动，触及程序各个地方，在 Inspector 中不断跳转查找程序逻辑违法了上面归纳整理的原则（不能很快找到需要的东西）。对于应用程序逻辑，UnityEvent 和 UltEvent 应该尽量不包含逻辑相关的东西，比如和程序有关的参数，应该尽量使用 UnityEvent 的 void 版本。只将它作为胶水层，为应用程序创建入口，将应用程序逻辑与各种事件源或插件串联起来。它只是电路板的导线，只负责将不同的模块连接起来，不应该包含任何程序逻辑。所有程序逻辑必须在 code 中追溯。

UnityEvent 不适合用作 MsgBus。因为它使得事件发起者引用了事件接受者，这违反了事件系统用于解耦系统的本意，使得发起事件的 GameObject 不能单独的使用。而 MsgBus 的本质是让事件发起者不感知接收者而单独使用，让接收者自己按需订阅和取消事件。

无论使用哪种 MsgBus 系统，Event System - Dispatcher，C# event/delegate，或者 ScriptableObjectArchitecture GameEvent，都必须经历三个步骤，哪个都省略不了：

- 声明事件（Message，Event，Delegate）
- 事件接收者订阅和取消事件（OnEnable/OnDisable AddListener/RemoveListener）
- 事件源发出事件（SendMessage/Raise）

由于游戏作为实时计算应用程序的本质，游戏中的很多系统的更新都不是立即的，通常都带有某种缓存系统，接受新的计算请求后，会随着时间（帧数）慢慢更新，将计算量分配到多个帧中，而不是全部堆积在一帧中计算，这样对导致 frame drop。这是游戏编程的一般原则。因此不应该习惯在请求后期望立即得到结果（这通常是想要同步得到结果，进行后续计算），这不是游戏编程的范式，而是通过一些信号，进行显示同步（在异步编程中同步前后依赖的操作）。UGUI 的 Layout 更新，Physics 的 Collider 更新，Curvy 改变 ControlPoints 后 Curve 的更新无不如此。强制同一帧同步得到结果不仅违反游戏编程的一般原则，而且很多时候无法实现，例如 Physics 和 Curvy 都没有提供强制重新结算最新状态的接口。因此要习惯和遵守延迟计算，在异步中同步的原则。通常情况下，延迟 1 帧或 2 帧就足够了。这也是为什么越来越多的系统都开始提供异步编程接口 Async Task 的原因。并且在游戏设计中也要将其考虑进去，游戏机制要能与异步计算协调，在计算没完成时，不会对 player 产生影响。因为这个过程一般非常短，因此只需要保证在异步计算没完成时，屏蔽掉 player 的交互即可，或保证 player 的交互不会对计算产生任何影响，player 通常是感知不到的。例如对于触屏，正常两次 touch 之间的间隔也要超过 200ms。或者使用影子追随的模式，让游戏系统永远追随 player 的最新操作。

code design 要拆分拆分再拆分。能写成两个类的，不要写成一个类。要把功能拆分成一个一个小类，把相关变量聚集在一起，不同功能的变量群相互隔离。让整个程序系统的功能有所有独立隔离的功能组合而来。如果贪图方便，将不同功能放在一起（一个类）实现，它们的变量将会聚集在一起，无论它们相关还是不相关，它们都潜在会相互纠缠相互影响，形成几何级数的潜在纠缠，非常容易导致寻常的 bug，为无意识的误操作打开方便之门。这种寻常的 bug 是打击 code 积极性的最重要原因。它们产生的原因是非常普通不起眼，但是又不得不去 debug。在无意义的地方消耗精力和时间是最让人沮丧的。强制隔离，将变量群纠缠强制拆分，将关注点隔离，将每个类的功能隔离。不仅在代码上看起来干净整洁，一个源文件只包含一个功能需要的全部东西。对于测试也是非常方便的，每个模块只需要单独测试。调试也只局限在这一个模块内，不会被不相干的东西干扰。这样拆分功能代码，难免要花费一些额外的精力，但是这些精力非常微小，而且几乎不会导致错误，与它们带来的隔离便利性所节约的时间和精力相比，不值一提。

举例而言，要实现 x y z 三个轴前后两向的 snap 对齐，只需要实现一个 axis 一个方向的 snap 功能，然后用 6 个 snap handler 来处理六个方向的对齐。不应该在一个类中处理 6 个方向的对齐。用一个 snap handler 处理一个 axis 两个方向的 snap，然后用 3 个 snap handler 处理 6 个方向的对齐，也是不可取的。要彻底贯彻将功能拆分最小化，用最小化的功能组合更大功能的原则。

大道至简，大巧不工。有两种写代码的方式，一种是极尽精巧，追求尽可能多奇淫巧技，用最少的 code 实现更多的功能。这样的代码巧妙，但是需要非常大的精力才能理解，更不用说编写。一种用尽可能简单的方法，宁可用更多的 code，尽量不使用精巧方法，这样的可能需要编写更多的代码，但是无论编写还是编写，都很容易。后面一种方法才是真正的黑客精神。要善于利用最低的成本，不用动脑子只需要消耗体力的方法（作为辅助、助记），用最简单思路实现。

让人一眼看出逻辑的程序才是好程序，需要人深入理解才能看懂的程序都是不好的。要尽可能利用一切辅助工具，减轻头脑压力，低成本的体力方法虽然初看起来耗时，但是它们都是简单显而易见，几乎不会出错的。更多的 code，更多的机器性能（琐碎的，不是至关重要的）都是可牺牲的成本。用更少的脑力理解的程序才是好程序，即使代码更多，即使消耗更多的琐碎机器性能，它们更容易编写，更容易调试，才能长长久久，这才是黑客精神。这与 docker 容器技术的精神一样，要尽可能一起工具作为辅助，宁可牺牲一些代价，换取对人而言更友好的工具。

Be Stupid，不要耍聪明，聪明反被聪明误。

Indie Game focus on game play and data。

