Be stupid
Don't be clever
Bottom up
Refactor, don't design

思考如何更优化地实现以及在各种方案中进行选择所浪费的时间和精力（进而导致的烦恼）带来的代价远远大于它们带来的收益。时间和精力要放在价值高的地方：游戏性和关键区域性能。游戏性才是最值得花时间关注的地方，而关键区域性能只存在于游戏循环中，对于 UI 相关以及类似的，只会偶尔执行的代码区域，根本不值得仔细设计和实现，不需要考虑最佳性能，只需要使用任何方法来快速实现，以现在计算机的计算能力，这些根本不可能造成问题。而且好的代码和架构不是设计出来的，而是迭代出来的，如果任何一个地方确认需要优化，也是很容易的事情，不要过早优化。对于这些地方，即使明知道有更优化的方法来实现也不要考虑，只要用最简单最直接了当的方法快速完成，考虑它们的性能优化完全是浪费时间。这就像用脚本语言编程一样，无论是代码里，还是解释器或虚拟机内部本身，相比于编译型语言，绝大多数的地方都不是最优的，都充满的冗余。但是使用的时候从来不会认为这是个问题。因为绝大多数情况下，脚本的应用场景都是不需要高性能的，相反便捷性，快速实现想法才是它追求的目标。游戏编程也是一样，其实绝大多数的地方（例如 UI ），都是不需要性能的，都只是偶尔执行的，只有游戏循环中的代码才需要考虑性能（而这只是非常少的地方）。因此，即使是游戏中，UI 这样不是频繁执行的代码即使用脚本语言实现都没问题。游戏编程要有脚本思维，牺牲性能换取便捷性。对游戏来说，迭代速度就是一切，完成比完美更重要。

对于优化，最重要的问题不是如何优化，而是确定优化的区域。因为对非必要的区域进行优化只是一厢情愿的浪费时间，通常那只是因为你知道能那么做，而不是应该那么做而已。一旦确定了目标区域，优化本身反而是容易的。

像使用脚本语言一样进行游戏开发，快速实现才是一切，在实践中确定需要优化的地方。对于脚本语言代码，确定了需要优化的地方后，这些地方会使用高性能的编译型语言来实现。

把资源（时间和技术）用在高价值的地方，对关键核心的区域可以花费精心设计（例如状态机）、优化性能（例如缓存对象池），对于不重要的地方简单粗略（不要在各种可能的实现之间进行评估选择）。不需要对所有的地方都精心设计，该精致的地方精致，该粗糙的地方粗糙。
